webpackHotUpdate("front-page",{

/***/ "./packages/mars-theme/src/components/pages/front-page/front-contact.js":
/*!******************************************************************************!*\
  !*** ./packages/mars-theme/src/components/pages/front-page/front-contact.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../layout */ \"./packages/mars-theme/src/components/layout/index.js\");\n/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../button */ \"./packages/mars-theme/src/components/button.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var Contact=(_ref)=>{var{state,actions,libraries}=_ref;var data=state.source.get(state.router.link);var page=state.source[data.type][data.id];var{home_contact_form}=page.meta_box;var[name,setName]=Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(\"\");var[email,setEmail]=Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(\"\");var[phone,setPhone]=Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(\"\");var[message,setMessage]=Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(\"\");var[hasFormSendOk,setFormState]=Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false);var sendForm=e=>{e.preventDefault();var data=new FormData();data.append(\"your-name\",name);data.append(\"email\",email);data.append(\"tel\",phone);data.append(\"message\",message);var xhr=new XMLHttpRequest();xhr.withCredentials=true;xhr.addEventListener(\"readystatechange\",function(){if(this.readyState===this.DONE){console.log(this.responseText);setName(\"\");setEmail(\"\");setPhone(\"\");setMessage(\"\");}});xhr.open(\"POST\",\"\".concat(state.source.api,\"/contact-form-7/v1/contact-forms/\").concat(home_contact_form,\"/feedback\"));xhr.send(data);};var handleChange=(e,setValue)=>{setValue(e.target.value);};return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(_layout__WEBPACK_IMPORTED_MODULE_4__[\"Section\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Col,{size:12,sizeSM:10,sizeMD:8,mxAuto:true},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Form,{onSubmit:e=>sendForm(e)},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Col,{size:\"12\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Input,{type:\"text\",id:\"name\",name:\"your-name\",placeholder:\"Nombre\",required:true,value:name,onChange:e=>handleChange(e,setName)})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Col,{size:\"12\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Input,{type:\"email\",id:\"email\",name:\"email\",placeholder:\"Email\",required:true,value:email,onChange:e=>handleChange(e,setEmail)})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Col,{size:\"12\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Input,{type:\"tel\",id:\"tel\",name:\"tel\",placeholder:\"Tel\\xE9fono\",value:phone,onChange:e=>handleChange(e,setPhone)})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Col,{size:\"12\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(Message,{id:\"message\",name:\"message\",placeholder:\"Mensaje\",value:message,onChange:e=>handleChange(e,setMessage)})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(ButtonBox,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(_button__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{type:\"submit\"},\"Cont\\xE1ctanos\"))))))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"connect\"])(Contact));var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1lgsxiu0\",label:\"Container\"})(_layout__WEBPACK_IMPORTED_MODULE_4__[\"Containers\"], false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var Row=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1lgsxiu1\",label:\"Row\"})(_layout__WEBPACK_IMPORTED_MODULE_4__[\"Rows\"], false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var Col=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1lgsxiu2\",label:\"Col\"})(_layout__WEBPACK_IMPORTED_MODULE_4__[\"Cols\"], false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var Form=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"form\",{target:\"e1lgsxiu3\",label:\"Form\"})(_layout__WEBPACK_IMPORTED_MODULE_4__[\"Rows\"],\" border-radius:2rem;box-shadow:0 2rem 2rem rgba(0,0,0,0.15);background-color:white;padding:2rem;margin:0;\",_layout__WEBPACK_IMPORTED_MODULE_4__[\"mq\"].sm,\"{padding:4rem;}\",_layout__WEBPACK_IMPORTED_MODULE_4__[\"mq\"].lg,\"{padding:8rem;border-radius:4rem;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var Input=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"input\",{target:\"e1lgsxiu4\",label:\"Input\"})((_ref2)=>{var{color=\"#F5F5F5\"}=_ref2;return/*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"display:block;width:100%;margin-bottom:2rem;padding:2rem;border-radius:2rem;background-color:\",color,\";border:initial;outline:initial;;label:Input;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var Message=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"textarea\",{target:\"e1lgsxiu5\",label:\"Message\"})((_ref3)=>{var{color=\"#F5F5F5\"}=_ref3;return/*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"display:block;width:100%;height:12.5rem;margin-bottom:2rem;padding:2rem;border-radius:2rem;background-color:\",color,\";border:initial;outline:initial;;label:Message;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var ButtonBox=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1lgsxiu6\",label:\"ButtonBox\"})( false?undefined:{name:\"ctdotb\",styles:\"text-align:center;margin-top:4rem;position:absolute;bottom:0;left:0;transform:translate(0,50%);width:100%;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/pages/front-page/front-contact.js\n");

/***/ })

})